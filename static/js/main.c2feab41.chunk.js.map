{"version":3,"sources":["components/Game/Info/Info.js","components/Game/GameOver/GameOver.js","components/Game/Game.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","style","this","props","best","clicks","Component","buttonStyles","fontSize","color","textShadow","position","top","left","width","height","backgroundColor","border","borderRadius","boxShadow","GameOver","Fragment","onClick","click","styles","text","textAlign","marginTop","marginBottom","container","display","flexWrap","justifyContent","card","margin","padding","boxSizing","img","objectFit","Game","state","dinosaurs","clicked","numClicks","numBest","isGameOver","componentWillMount","_this","setState","randomize","Dinosaurs","handleReset","handleClick","dinoName","indexOf","clickedArr","num","push","console","log","_this2","Game_GameOver_GameOver","Game_Info_Info","map","dinosaur","index","background","concat","image","overflow","key","name","flexDirection","alignItems","fontWeight","button","Home","Link","to","process","App","BrowserRouter","minHeight","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2feab41.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Info extends Component {\r\n    render() {\r\n        return <div style={this.props.style}>\r\n            Highest Score: {this.props.best} Count: {this.props.clicks}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Info","import React, { Component } from 'react'\r\nconst buttonStyles = {\r\n    fontSize: '2rem',\r\n    color: '#99aa66',\r\n    textShadow: '1px 1px 1px rgba(0,0,0, 0.8)',\r\n    position: 'fixed',\r\n    top: '40%',\r\n    left: '30%',\r\n    width: '40%',\r\n    height: '20%',\r\n    backgroundColor: '#ecb651', \r\n    border: 'none', \r\n    borderRadius: '5px',\r\n\r\n    boxShadow: '6px 6px 15px 5px rgba(0, 0, 0, 0.2)'\r\n}\r\nclass GameOver extends Component {\r\n    render() {\r\n        return <>\r\n            <h4 style={this.props.style}>GAME OVER</h4>\r\n            <button style={buttonStyles} onClick={this.props.click}>Reset</button>\r\n        </>\r\n    }\r\n}\r\n\r\nexport default GameOver","import React, { Component } from 'react'\r\nimport Dinosaurs from './dinosaurs.json'\r\nimport randomize from 'array-random'\r\nimport Info from './Info'\r\nimport GameOver from './GameOver'\r\n\r\nconst styles = {\r\n    text: {\r\n        color: '#99aa66',\r\n        textAlign: 'center',\r\n        marginTop: 0,\r\n        marginBottom: '.5rem',\r\n        textShadow: '1px 1px 1px rgba(0,0,0, 0.8)'\r\n    },\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        backgroundColor: '#ecb651',\r\n        width: '23%',\r\n        height: '17vh',\r\n        margin: '1%',\r\n        borderRadius: '5px',\r\n        padding: '2px',\r\n        boxSizing: 'border-box'\r\n    },\r\n    img: {\r\n        objectFit: 'contain',\r\n        height: 'inherit',\r\n        width: 'inherit'\r\n    }\r\n}\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        dinosaurs: [],\r\n        clicked: [],\r\n        numClicks: 0,\r\n        numBest: 0,\r\n        isGameOver: false\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.setState({ dinosaurs: randomize(Dinosaurs) })\r\n    }\r\n\r\n    handleReset = () => {\r\n        this.setState({\r\n            isGameOver: false,\r\n            numClicks: 0,\r\n            clicked: []\r\n        })\r\n\r\n    }\r\n    handleClick = (dinoName) => {\r\n        if (!this.state.isGameOver) {\r\n            if (this.state.clicked.indexOf(dinoName) === -1) {\r\n                let clickedArr = this.state.clicked\r\n                let num = this.state.numClicks\r\n                clickedArr.push(dinoName)\r\n                num++\r\n                this.setState({ dinosaurs: randomize(Dinosaurs), clicked: clickedArr, numClicks: num })\r\n                console.log(clickedArr)\r\n            }\r\n            else {\r\n                this.setState({ isGameOver: true })\r\n                if (this.state.numClicks > this.state.numBest) {\r\n                    this.setState({ numBest: this.state.numClicks })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1 style={styles.text}> Dinosaur Memory Game </h1>\r\n                {this.state.isGameOver ? <GameOver style={styles.text} click={this.handleReset} /> : <h4 style={styles.text}> Don't choose the same one twice!</h4>}\r\n                <Info style={styles.text} clicks={this.state.numClicks} best={this.state.numBest} />\r\n                <div style={styles.container}>\r\n                    {this.state.dinosaurs.map((dinosaur, index) => {\r\n                        return <div style={{\r\n                            background: `#ecb651 url('./assets/images/${dinosaur.image}') bottom center / contain no-repeat`,\r\n                            overflow: 'hidden',\r\n                            width: '21%',\r\n                            height: '17vh',\r\n                            margin: '1%',\r\n                            borderRadius: '5px',\r\n                            padding: '2px',\r\n                        }} key={index} onClick={() => this.handleClick(dinosaur.name)}>\r\n                            <p style={styles.text}>{dinosaur.name}</p>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst styles = {\r\n    container: {\r\n        height: '60vh',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center',\r\n        padding: '2vw'\r\n    },\r\n    text: {\r\n        textAlign: 'center',\r\n        marginTop: '0',\r\n        fontWeight: 'bold',\r\n        color: '#99aa66',\r\n        textShadow: '1px 1px 1px rgba(0,0,0, 0.8)'\r\n    },\r\n    button: {\r\n        fontWeight: 'bold',\r\n        color: '#99aa66',\r\n        textShadow: '1px 1px 1px rgba(0,0,0, 0.8)',\r\n        backgroundColor: '#ecb651',\r\n        border: 'none',\r\n        width: '25vw',\r\n        height: '10vw',\r\n        borderRadius: '5px',\r\n    }\r\n}\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div style={styles.container}>\r\n                <h1 style={styles.text}>Dinosaur Memory Game</h1>\r\n                <h3 style={styles.text}>This game will challenge your memory. After choosing a dinosaur the game will shuffle and you have to choose again. Don't click the same dinosaur twice or the game is over.</h3>\r\n                <Link to={process.env.PUBLIC_URL + '/game'}>\r\n                    <button style={styles.button} >\r\n                    New Game\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React, { Component } from 'react'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Game from './components/Game'\nimport Home from './components/Home'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n        <div style={{background: 'url(./assets/images/bones.jpg) fixed center /cover', minHeight: '100vh'}}>\n          <Route exact path={process.env.PUBLIC_URL + '/'} component={Home}/>\n          <Route path={process.env.PUBLIC_URL + '/game'} component={Game} />\n          </div>\n        </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}